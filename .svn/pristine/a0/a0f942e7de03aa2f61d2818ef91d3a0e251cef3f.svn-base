//
//  BXGCourseOutlineVC.swift
//  BoxueguHD
//
//  Created by Renying Wu on 2018/7/17.
//  Copyright © 2018年 itcast. All rights reserved.
//

import UIKit

class BXGCourseOutlineSectionHeaderView: UIView {
    
    public func installData(title: String, isOpen: Bool) {
        
        headerTitleLb.text = title
        
        if isOpen {
            open()
        }else {
            close()
        }
    }
    
    lazy var headerTitleLb: UILabel = {
        let item = UILabel()
        item.font = UIFont.pingFangSCRegular(withSize: 16)
        item.textColor = UIColor.hexColor(hex: 0x34495E)
        item.text = ""
        
        return item
    }()
    
    func open() {
        UIView.animate(withDuration: 5) {
            self.headerOpenStateImgV.layer.transform = CATransform3DMakeRotation(CGFloat(Double.pi / -2), 0, 0, 1)
        }
    }
    
    func close() {
        UIView.animate(withDuration: 5) {
            self.headerOpenStateImgV.layer.transform = CATransform3DIdentity
        }
        
    }
    
    var tapClosure: (()->())?
    
    lazy var headerOpenStateImgV: UIImageView = {
        let item = UIImageView(image: UIImage(named: "course_outline_arrow_left")!)
        return item
    }()
    
    override init(frame: CGRect) {
        super.init(frame: CGRect.zero)
        backgroundColor = UIColor.hexColor(hex: 0xF6F9FC)

        installUI()
    }
    
    func installUI() {
        
        addSubview(headerTitleLb)
        addSubview(headerOpenStateImgV)
        
        headerTitleLb.snp.makeConstraints { (make) in
            make.centerY.equalToSuperview()
            make.left.equalToSuperview().offset(24)
            make.right.equalToSuperview().offset(-40)
        }
        
        headerOpenStateImgV.snp.makeConstraints { (make) in
            make.centerY.equalToSuperview()
            make.right.equalToSuperview().offset(-24)
        }
        
        let tap = UITapGestureRecognizer(target: self, action: #selector(tapView))
        self.addGestureRecognizer(tap)
    }
    
    @objc func tapView() {
        if let tap = tapClosure {
            tap()
        }
    }
    
    required init?(coder aDecoder: NSCoder) {
        fatalError("init(coder:) has not been implemented")
    }
}



class BXGCourseOutlineSectionExamCell: UITableViewCell {
    
    lazy var cellIconImgV: UIImageView = {
        
        let item = UIImageView(image: #imageLiteral(resourceName: "course_outline_section_exam"))
        return item
    }()
    
    lazy var cellTitleLb: UILabel = {
        
//        font-family: PingFangSC-Regular;
//        font-size: 30px;
//        color: #34495E;
//        line-height: 30px;
        
        let item = UILabel()
        item.font = UIFont.pingFangSCRegular(withSize: 15)
        item.text = "小节测试"
        item.textColor = UIColor.hexColor(hex: 0x34495E)
        return item
    }()
    
    override init(style: UITableViewCellStyle, reuseIdentifier: String?) {
        super.init(style: style, reuseIdentifier: reuseIdentifier)
        
        installUI()
    }
    
    required init?(coder aDecoder: NSCoder) {
        fatalError("init(coder:) has not been implemented")
    }
    
    func installUI() {
        self.backgroundColor = UIColor.white
        addSubview(cellIconImgV)
        addSubview(cellTitleLb)
//        addSubview(downloadStateLb)
        
        cellIconImgV.snp.makeConstraints { (make) in
            make.left.equalToSuperview().offset(24)
            make.centerY.equalToSuperview()
        }
        cellTitleLb.snp.makeConstraints { (make) in
            make.left.equalTo(cellIconImgV.snp.right).offset(10)
            make.centerY.equalToSuperview()
            make.right.equalToSuperview().offset(-25)
        }
        
//        downloadStateLb.snp.makeConstraints { (make) in
//            make.right.equalToSuperview().offset(-25)
//            make.left.equalTo(cellTitleLb.snp.right)
//            make.centerY.equalToSuperview()
//        }
        cellIconImgV.setContentHuggingPriority(.required, for: UILayoutConstraintAxis.horizontal)
        cellIconImgV.setContentCompressionResistancePriority(.required, for: .horizontal)
//        downloadStateLb.setContentHuggingPriority(.required, for: UILayoutConstraintAxis.horizontal)
//        downloadStateLb.setContentCompressionResistancePriority(.required, for: .horizontal)
        
    }
}

class FlodManager {
    public var foldStateSet: Set<Int>
    init() {
        foldStateSet = Set<Int>()
    }
}

class BXGCourseOutlineVC: UIViewController {
    
    let courseModel: BXGStudyCourseModel
    let phaseModel: BXGCoursePhaseModel
    let moduleModel: BXGCourseModuleModel
    
    lazy var flodManager: FlodManager = {
        return FlodManager()
    }()
    
    lazy var viewModel: BXGCourseOutlineViewModel = {
        return BXGCourseOutlineViewModel()
    }()
    
    init(courseModel fromCourseModel: BXGStudyCourseModel, phaseModel fromPhaseModel: BXGCoursePhaseModel, moduleModel fromModuleModel: BXGCourseModuleModel) {
        courseModel = fromCourseModel
        phaseModel = fromPhaseModel
        moduleModel = fromModuleModel
        super.init(nibName: nil, bundle: nil)
    }

    required init?(coder aDecoder: NSCoder) {
        fatalError("init(coder:) has not been implemented")
    }
    
    lazy var outlineTableV: UITableView = {
        let tableview = UITableView(frame: CGRect.zero, style: UITableViewStyle.grouped)
        tableview.backgroundColor = UIColor.white
        tableview.register(BXGCourseOutlineVideoCell.self, forCellReuseIdentifier: "BXGCourseOutlineVideoCell")
        tableview.register(BXGCourseOutlineSectionExamCell.self, forCellReuseIdentifier: "BXGCourseOutlineSectionExamCell")
        tableview.separatorInset = UIEdgeInsetsMake(0, 52, 0, 0)
        tableview.separatorColor = UIColor.hexColor(hex: 0xf5f5f5)
        return tableview
    }()
    
    override func viewDidLoad() {
        super.viewDidLoad()
        
        BXGVODPlayerListManager.shared.addDelegate(any: self)
        outlineTableV.delegate = self
        outlineTableV.dataSource = self
        view.addSubview(outlineTableV)
        
        outlineTableV.snp.makeConstraints { (make) in
            make.left.right.bottom.top.equalToSuperview()
        }
        
        loadData()
    }
    
    func loadData() {
        if let courseId = courseModel.id, let moduleId = moduleModel.id {
            viewModel.request(courseId: courseId, moduleId: moduleId) {  (succeed) in
                self.outlineTableV.reloadData()
                self.startPlay()
            }
        }
    }
    func startPlay() {
        
        if let listArray = self.viewModel.generateVODModels() {
            BXGVODPlayerListManager.shared.installPlayListArray(listArray: listArray)
            BXGVODPlayerListManager.shared.play(listIndex: 0, videoIndex: 0)
        }
    }
    
    func tapHeaderView(section: Int) {
        if(flodManager.foldStateSet.contains(section)) {
            // 删除
            flodManager.foldStateSet.remove(section)
        }else {
            // 增加
            flodManager.foldStateSet.insert(section)
        }
        outlineTableV.reloadSections(IndexSet(integer: section), with: UITableViewRowAnimation.automatic)
    }
}

extension BXGCourseOutlineVC: UITableViewDelegate, UITableViewDataSource {
    
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {

        
        if isSectionExam(indexPath: indexPath) {
            clickSectionExam()
        }else {
            BXGVODPlayerListManager.shared.play(listIndex: indexPath.section, videoIndex: indexPath.row)
        }
    
        tableView.deselectRow(at: indexPath, animated: true)
    }
    
    func tableView(_ tableView: UITableView, viewForHeaderInSection section: Int) -> UIView? {
        let sectionHeaderView = BXGCourseOutlineSectionHeaderView()
        
        var isOpen = false
        if(flodManager.foldStateSet.contains(section)) {
            isOpen = false
        }else {
            isOpen = true
        }
        var title:String?
        if let sectionItems = self.viewModel.moduleModel?.sectionItems {
        
            title = sectionItems[section].sectionName
        }
        
        sectionHeaderView.installData(title: title ?? "", isOpen: isOpen)
        
        sectionHeaderView.tapClosure = {
            self.tapHeaderView(section: section)
        }
        return sectionHeaderView
    }
    
    func tableView(_ tableView: UITableView, viewForFooterInSection section: Int) -> UIView? {
        return UIView()
    }
    
    func tableView(_ tableView: UITableView, heightForHeaderInSection section: Int) -> CGFloat {
        return 44
    }
    
    func tableView(_ tableView: UITableView, heightForFooterInSection section: Int) -> CGFloat {
        return 0.01
    }
    
    func numberOfSections(in tableView: UITableView) -> Int {
        return (self.viewModel.moduleModel?.sectionItems?.count) ?? 0
    }
    
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        if(flodManager.foldStateSet.contains(section)) {
            return 0
        }else {
            if let sectionItems = self.viewModel.moduleModel?.sectionItems,
                let pointItems = sectionItems[section].pointItems {
                
                if let isSectionTest = sectionItems[section].isSectionTest, isSectionTest == 1{
                    return pointItems.count + 1
                }else {
                    return pointItems.count
                }
                
            }else {
                return 0
            }
        }
    }
    
    func clickSectionExam() {
        BXGHUDTool.showHUD(string: "点击小节测试")
    }
    
    func isSectionExam(indexPath: IndexPath) -> Bool {
        guard let moduleModel = self.viewModel.moduleModel,
            let sectionItems = moduleModel.sectionItems,
            indexPath.section < sectionItems.count,
            let pointItems = sectionItems[indexPath.section].pointItems
        else {
            return false
        }
        return pointItems.count == indexPath.row
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        
        // 判断是否是 小节测试
        if isSectionExam(indexPath: indexPath) {
            let cell = tableView.dequeueReusableCell(withIdentifier: "BXGCourseOutlineSectionExamCell", for: indexPath)
            if let cell = cell as? BXGCourseOutlineSectionExamCell  {
//                if let sectionItems = self.viewModel.moduleModel?.sectionItems,
//                    let pointItems = sectionItems[indexPath.section].pointItems {
//                    let pointModel = pointItems[indexPath.row]
//
//                    if let videoId = pointModel.videoId,let currentVideoId = BXGVODPlayerListManager.shared.currentVideo?.id, currentVideoId == videoId {
//                        cell.installData(pointModel: pointModel, title: pointModel.pointName ?? "", isPlaying: true)
//                    }else {
//                        cell.installData(pointModel: pointModel, title: pointModel.pointName ?? "", isPlaying: false)
//
//                    }
//                }
            }
            return cell
        }else {
            let cell = tableView.dequeueReusableCell(withIdentifier: "BXGCourseOutlineVideoCell", for: indexPath)
            if let cell = cell as? BXGCourseOutlineVideoCell  {
                if let sectionItems = self.viewModel.moduleModel?.sectionItems,
                    let pointItems = sectionItems[indexPath.section].pointItems {
                    let pointModel = pointItems[indexPath.row]
                    
                    if let videoId = pointModel.videoId,let currentVideoId = BXGVODPlayerListManager.shared.currentVideo?.id, currentVideoId == videoId {
                        cell.installData(pointModel: pointModel, title: pointModel.pointName ?? "", isPlaying: true)
                    }else {
                        cell.installData(pointModel: pointModel, title: pointModel.pointName ?? "", isPlaying: false)
                        
                    }
                }
            }
            return cell
        }
        
        
        
    }
}
    

extension BXGCourseOutlineVC: BXGPlayerListManagerDelegate {
    
    func videoReadyToPlay(manager: BXGVODPlayerListManager, video: BXGVODPlayerVideoModel, index: Int) {
        outlineTableV.reloadData()
    }
    
    func vidooPlaying(manager: BXGVODPlayerListManager, video: BXGVODPlayerVideoModel, index: Int) {
        
    }
    
    func videoPlayDone(manager: BXGVODPlayerListManager, video: BXGVODPlayerVideoModel, index: Int) {
        
    }
    
    func videoDidChange(manager: BXGVODPlayerListManager, video: BXGVODPlayerVideoModel, index: Int) {
        
    }
    
    func videoWillPlay(manager: BXGVODPlayerListManager, video: BXGVODPlayerVideoModel, index: Int) {
        manager.play(index: index)
    }
    
    func listPlayDone(manager: BXGVODPlayerListManager, list: [BXGVODPlayerVideoModel]) {
        
    }

}


