//
//  BXGLiveRoomVC.swift
//  BoxueguHD
//
//  Created by Renying Wu on 2018/7/24.
//  Copyright © 2018年 itcast. All rights reserved.
//

import Foundation


class BXGLiveRoomViewModel {
    
    let planId: Int
    let roomId: String
    
    init(planId fromPlanId: Int, roomId fromRoomId: String) {
        planId = fromPlanId
        roomId = fromRoomId
    }
}

class BXGLiveRoomVC: UIViewController {
    
    let viewModel: BXGLiveRoomViewModel
    
    init(viewModel fromViewModel: BXGLiveRoomViewModel) {
        viewModel = fromViewModel
        super.init(nibName: nil, bundle: nil    )
    }
    
    required init?(coder aDecoder: NSCoder) {
        fatalError("init(coder:) has not been implemented")
    }

    lazy var livePlayerVC: UIViewController = {
        return UIViewController()
    }()
    lazy var liveInfoVC: UIViewController = {
        return UIViewController()
    }()
    lazy var liveChatVC: UIViewController = {
        return UIViewController()
    }()
    
    lazy var livePlayerView: UIView = {
        let view = BXGConstrueLivePlayerView()
        return view
    }()
    
    lazy var liveInfoView: UIView = self.liveInfoVC.view
    
    lazy var liveChatView: BXGConstrueChatView = {
        let view = BXGConstrueChatView()
        return view
    }()
    
    lazy var placeHolderView: UIView = {
        let view = UIView()
        return view
    }()
    
    lazy var demoView: UIView = {
        let view = UIView()
        return view
    }()
    
    override func viewDidLoad() {
        super.viewDidLoad()
        
        installUI()
        
        BXGLiveManager.share().installRoomId("\(viewModel.roomId)")
        install()
        BXGLiveManager.share().install()
        BXGLiveManager.share().add(self)
        BXGLiveManager.share().requestPlay()
        
    }
    func install() {
        
    }
    
    func installUI() {
        
        
        view.addSubview(liveInfoView)
        view.addSubview(liveChatView)
        view.addSubview(placeHolderView)
        view.addSubview(livePlayerView)
        view.addSubview(demoView)
        liveChatView.snp.makeConstraints { (make) in
            make.right.equalToSuperview()
            make.top.bottom.equalToSuperview()
            make.width.equalTo(340)
        }
        
        placeHolderView.snp.makeConstraints { (make) in
            make.left.top.equalToSuperview()
            make.right.equalTo(liveChatView.snp.left)
            make.height.equalTo(livePlayerView.snp.width).multipliedBy(850 / 1368.0)
        }
        
        livePlayerView.snp.makeConstraints { (make) in
            make.left.bottom.top.right.equalTo(placeHolderView)
        }
        
        liveInfoView.snp.makeConstraints { (make) in
            make.top.equalTo(placeHolderView.snp.bottom)
            make.left.bottom.equalToSuperview()
            make.right.equalTo(liveChatView.snp.left)
        }
        liveChatView.backgroundColor = UIColor.random()
        liveInfoView.backgroundColor = UIColor.random()
        livePlayerView.backgroundColor = UIColor.random()
        demoView.snp.makeConstraints { (make) in
            make.bottom.right.equalTo(livePlayerView)
            make.width.height.equalTo(100)
        }
        let tap = UITapGestureRecognizer(target: self, action: #selector(tapInfoView))
        demoView.addGestureRecognizer(tap)
        demoView.backgroundColor = UIColor.random()
    }
    
    var isFull: Bool = false
    
    @objc func tapInfoView() {
        isFull = !isFull
        if isFull {
            livePlayerView.snp.remakeConstraints { (make) in
                make.left.bottom.top.right.equalTo(self.view)
            }
            
            UIView.animate(withDuration: 0.3) {
                self.view.layoutIfNeeded()
            }
            
        }else {
            livePlayerView.snp.remakeConstraints { (make) in
                make.left.bottom.top.right.equalTo(placeHolderView)
            }
            UIView.animate(withDuration: 0.3) {
                self.view.layoutIfNeeded()
            }
        }
    }
}
extension BXGLiveRoomVC: BXGLiveManagerDelegate {
    
}
