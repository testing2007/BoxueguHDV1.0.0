//
//  BXGDownloadSelectVC.swift
//  BoxueguHD
//
//  Created by apple on 2018/7/18.
//  Copyright © 2018年 itcast. All rights reserved.
//

import UIKit

class BXGDownloadSelectVC: UIViewController {

    var courseName:String;
    var openHeadSectionIdSet:Set<Int>;//存放所有打开 SectionHeader 的记录集合
    var selItemsDictInSection:Dictionary<Int/*key=sectionId*/, Set<Int>/*value=itemsInSection*/>
    
    init(courseName:String) {
        self.courseName = courseName
        self.openHeadSectionIdSet = Set<Int>()
        self.selItemsDictInSection = Dictionary<Int, Set<Int>>()
        super.init(nibName: nil, bundle: nil)
    }
    
    required init?(coder aDecoder: NSCoder) {
        fatalError("init(coder:) has not been implemented")
    }
    
    override func viewDidLoad() {
        super.viewDidLoad()

        // Do any additional setup after loading the view.
        self.title = courseName
        self.installUI();
    }

    override func didReceiveMemoryWarning() {
        super.didReceiveMemoryWarning()
        // Dispose of any resources that can be recreated.
    }
    
    func installUI() {
        self.view.addSubview(self.tableView)
        self.view.addSubview(self.bottomView)
        
        self.bottomView.snp.makeConstraints { (make) in
            make.left.right.bottom.equalToSuperview()
            make.height.equalTo(49)
        }
        self.tableView.snp.makeConstraints { (make) in
            make.bottom.equalTo(self.bottomView.snp.top).offset(0)
            make.left.right.top.equalTo(0);
        }
    }
    
    lazy var bottomView:BXGDownloadSelectBottomView = {
        let bottomView:BXGDownloadSelectBottomView = BXGDownloadSelectBottomView()
        bottomView.delegate = self;
        bottomView.backgroundColor = UIColor.hexColor(hex: 0xFFFFFF)
        bottomView.layer.shadowColor = UIColor.black.cgColor
        bottomView.layer.shadowOffset = CGSize(width: 10, height: -8)
        bottomView.layer.shadowOpacity = 0.04
        bottomView.totalAndAvailableSpaceLabel.text = "*****总空间50GB, 可用空间23GB"
        return bottomView;
    }()
    
    lazy var tableView:UITableView = {
        let tableView:UITableView = UITableView(frame: CGRect.zero, style: UITableViewStyle.plain)
        tableView.delegate = self
        tableView.dataSource = self
        tableView.backgroundColor = UIColor.hexColor(hex: 0xFFFFFF)
        tableView.separatorColor = UIColor.hexColor(hex: 0xF5F5F5)
        tableView.rowHeight = 44
        tableView.sectionHeaderHeight = 44
        tableView.separatorStyle = .singleLine;
        tableView.register(BXGDownloadSelectCell.self,
                           forCellReuseIdentifier: BXGDownloadSelectCell.description())
        tableView.register(BXGDownloadSelectHeaderView.self,
                           forHeaderFooterViewReuseIdentifier: BXGDownloadSelectHeaderView.description())
        return tableView;
    }()
}

extension BXGDownloadSelectVC : UITableViewDelegate {
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        let cell:BXGDownloadSelectCell = tableView.cellForRow(at: indexPath) as! BXGDownloadSelectCell;
        if var itemsInSectionSet:Set<Int> = self.selItemsDictInSection[cell.sectionId!] {
            if(itemsInSectionSet.contains(cell.identifier!)) {
                itemsInSectionSet.remove(cell.identifier!)
                if(itemsInSectionSet.count == 0) {
                    self.selItemsDictInSection[cell.sectionId!] = nil;
                } else {
                    self.selItemsDictInSection[cell.sectionId!] = itemsInSectionSet;
                }
                cell.bSel = false
            } else {
                itemsInSectionSet.insert(cell.identifier!)
                self.selItemsDictInSection[cell.sectionId!] = itemsInSectionSet;
                cell.bSel = true
            }
        } else {
            var selItemsInSection:Set<Int> = Set<Int>()
            selItemsInSection.insert(cell.identifier!)
            self.selItemsDictInSection[cell.sectionId!] = selItemsInSection
            cell.bSel = true;
        }
    }
}

extension BXGDownloadSelectVC : UITableViewDataSource {
    func numberOfSections(in tableView: UITableView) -> Int {
        return 10
    }
    
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        if(openHeadSectionIdSet.contains(section)) {
            return 10
        } else {
            return 0
        }
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let cell:BXGDownloadSelectCell = tableView.dequeueReusableCell(withIdentifier: BXGDownloadSelectCell.description(), for: indexPath) as! BXGDownloadSelectCell
        cell.delegate = self;
        cell.sectionId = indexPath.section;
        cell.identifier = indexPath.row; //TODO:- 可能需要修改标识符
        if let selItemsInSection:Set<Int> = selItemsDictInSection[indexPath.section] {
            if selItemsInSection.contains(cell.identifier!) {
                cell.bSel = true
            } else {
                cell.bSel = false
            }
        } else {
            cell.bSel = false
        }

//        cell.textLabel?.text = String(indexPath.row)
        cell.videoNameLabel.text = String(indexPath.row)
        
        return cell;
    }
    
    func tableView(_ tableView: UITableView, viewForHeaderInSection section: Int) -> UIView? {
        let headerView:BXGDownloadSelectHeaderView = tableView.dequeueReusableHeaderFooterView(withIdentifier: BXGDownloadSelectHeaderView.description()) as! BXGDownloadSelectHeaderView;
        headerView.delegate = self;
        headerView.isOpen = self.openHeadSectionIdSet.contains(section);
        headerView.sectionId = section;
        headerView.sectionLabel.text = String.init(format: "节名称%d", arguments: [section])
        return headerView;
    }
}

extension BXGDownloadSelectVC : BXGDownloadSelectHeaderViewDelegate {
    func openSection(sectionId:Int) -> Void {
        self.openHeadSectionIdSet.insert(sectionId)
        self.tableView.reloadSections(IndexSet.init(integer: sectionId), with: UITableViewRowAnimation.automatic)
    }
    
    func closeSection(sectionId:Int) -> Void {
        self.openHeadSectionIdSet.remove(sectionId)
        self.tableView.reloadSections(IndexSet.init(integer: sectionId), with: UITableViewRowAnimation.automatic)
    }
}

extension BXGDownloadSelectVC : BXGDownloadSelectCellDelegate {
    func onSelectOptionItem(bSelected: Bool, cellItem: BXGDownloadSelectCell) {
        if var itemsInSectionSet:Set<Int> = self.selItemsDictInSection[cellItem.sectionId!] {
            if(bSelected) {
                itemsInSectionSet.insert(cellItem.identifier!)
                self.selItemsDictInSection[cellItem.sectionId!] = itemsInSectionSet;
            } else {
                itemsInSectionSet.remove(cellItem.identifier!)
                if(itemsInSectionSet.count == 0) {
                    self.selItemsDictInSection[cellItem.sectionId!] = nil;
                } else {
                    self.selItemsDictInSection[cellItem.sectionId!] = itemsInSectionSet;
                }
            }
        } else {
            assert(bSelected, "the cell is not select state")
            var selItemsInSection:Set<Int> = Set<Int>()
            selItemsInSection.insert(cellItem.identifier!)
            self.selItemsDictInSection[cellItem.sectionId!] = selItemsInSection
        }
    }
}

extension BXGDownloadSelectVC : BXGDownloadSelectBottomViewDelegate {
    func onConfirmDownload() -> Void {
        NSLog("onConfirmDownload")
    }
}

