//
//  BXGLiveRoomVC.swift
//  BoxueguHD
//
//  Created by Renying Wu on 2018/7/24.
//  Copyright © 2018年 itcast. All rights reserved.
//

import Foundation

class BXGLiveRoomVC: UIViewController {
    
    let viewModel: BXGLiveRoomViewModel
    
    init(viewModel fromViewModel: BXGLiveRoomViewModel) {
        viewModel = fromViewModel
        super.init(nibName: nil, bundle: nil    )
    }
    
    required init?(coder aDecoder: NSCoder) {
        fatalError("init(coder:) has not been implemented")
    }

    lazy var livePlayerVC: UIViewController = {
        return UIViewController()
    }()
    lazy var liveInfoVC: UIViewController = {
        return UIViewController()
    }()
    lazy var liveChatVC: UIViewController = {
        return UIViewController()
    }()
    
    lazy var livePlayerView: UIView = {
        let view = BXGConstrueLivePlayerView()
        return view
    }()
    
    lazy var liveInfoView: BXGLiveRoomInfoView = {
        let view = BXGLiveRoomInfoView()
        return view
    }()
    
    lazy var liveChatView: BXGConstrueChatView = {
        let view = BXGConstrueChatView()
        view.sendMessageBlock = { msg in
            self.sendMessage(message: msg)
        }
        return view
    }()
    
    lazy var chatTagView: UILabel = {
        let view = UILabel()
        view.font = UIFont.pingFangSCRegular(withSize: 20)
        view.textColor = UIColor.hexColor(hex: 0x34495e)
        view.text = "互动交流"
        return view
    }()
    
    lazy var bottomChatBtn: UIButton = {
        let view = UIButton()
        
        let lb = UILabel()
        lb.font = UIFont.pingFangSCRegular(withSize: 15)
        lb.textColor = UIColor.hexColor(hex: 0xA3B3BF)
        lb.text = "发表评论吧～"
        view.addSubview(lb)
        lb.snp.makeConstraints{ (make) in
            make.centerY.equalToSuperview()
            make.left.equalToSuperview().offset(25)
        }
        view.backgroundColor = UIColor.hexColor(hex: 0xF6F9FC)
//        font-family: PingFangSC-Regular;
//        font-size: 30px;
//        color: #A3B3BF;
//        line-height: 30px;
        
        
        view.addTarget(self, action: #selector(clickChatBtn), for: UIControlEvents.touchUpInside)
        return view
    }()
    @objc func clickChatBtn() {
        showChatView()
    }
    
    lazy var placeHolderView: UIView = {
        let view = UIView()
        return view
    }()
    
    lazy var demoView: UIView = {
        let view = UIView()
        return view
    }()
    
    func sendMessage(message: String?) {
        if let message = message, message.count > 0 {
            BXGLiveManager.share().chatMessage(message)
        }
    }
    
    lazy var rightView: UIView = {
        let view = UIView()
        view.backgroundColor = UIColor.hexColor(hex: 0xf5f5f5)
        return view
    }()
    
    lazy var offsetView: UIView = {
        let view = UIView()
        return view
    }()
    
    lazy var keyboardView: BXGConstrueKeyboardView = {
        let view = BXGConstrueKeyboardView()
        view.textView.delegate = self
        view.backgroundColor = UIColor.white
        return view
    }()
    
    override func viewDidDisappear(_ animated: Bool) {
        super.viewDidDisappear(animated)
        BXGLiveManager.share().unintall()
    }
    
    override func viewDidLoad() {
        super.viewDidLoad()
        
        installUI()
        installObserver()
        let detailModel = viewModel.detailModel
        liveInfoView.setDataWithName(detailModel.name, subjectName: detailModel.subjectName, desc: detailModel.desc, teacher: detailModel.teacher, duration: (detailModel.duration ?? 0) as NSNumber, startTime: detailModel.startTime, endTime: detailModel.endTime)
        
        
        BXGLiveManager.share().installRoomId("\(viewModel.roomId)")
        install()
        BXGLiveManager.share().install()
        BXGLiveManager.share().add(self)
        BXGLiveManager.share().requestPlay()
        
    }
    func install() {
        
    }
    
    func installUI() {
        
        
        view.addSubview(liveInfoView)
        view.addSubview(rightView)
        rightView.addSubview(liveChatView)
        rightView.addSubview(chatTagView)
        rightView.addSubview(bottomChatBtn)
        
        view.addSubview(offsetView)
        
        view.addSubview(placeHolderView)
        view.addSubview(livePlayerView)
        view.addSubview(demoView)
        view.addSubview(keyboardView)
        
        keyboardView.snp.makeConstraints { (make) in
            make.bottom.equalTo(offsetView.snp.top)
            make.left.right.equalToSuperview()
            make.height.equalTo(54)
        }
        
        rightView.snp.makeConstraints { (make) in
            make.width.equalTo(340)
            make.right.equalToSuperview()
            make.top.equalToSuperview()
            make.bottom.equalToSuperview()
        }
        offsetView.snp.makeConstraints { (make) in
            make.left.right.bottom.equalToSuperview()
            make.height.equalTo(0.01)
        }
        
        chatTagView.snp.makeConstraints { (make) in
            make.left.equalToSuperview().offset(25)
//            make.right.equalToSuperview()
            make.top.equalToSuperview().offset(21)
        }
        
        chatTagView.setContentCompressionResistancePriority(UILayoutPriority.required, for: UILayoutConstraintAxis.horizontal)
        chatTagView.setContentHuggingPriority(UILayoutPriority.required, for: UILayoutConstraintAxis.horizontal)
        
        liveChatView.snp.makeConstraints { (make) in
            make.right.equalToSuperview()
            make.left.equalToSuperview()
            make.top.equalTo(chatTagView.snp.bottom).offset(10)
//            make.bottom.equalToSuperview()
        }
        
        bottomChatBtn.snp.makeConstraints { (make) in
            make.left.right.bottom.equalToSuperview()
            make.height.equalTo(49)
            make.top.equalTo(liveChatView.snp.bottom)
        }
        
        placeHolderView.snp.makeConstraints { (make) in
            make.left.top.equalToSuperview()
            make.right.equalTo(rightView.snp.left)
            make.height.equalTo(placeHolderView.snp.width).multipliedBy(850 / 1368.0)
        }
        
        livePlayerView.snp.makeConstraints { (make) in
            make.left.bottom.top.right.equalTo(placeHolderView)
        }
        
        liveInfoView.snp.makeConstraints { (make) in
            make.top.equalTo(placeHolderView.snp.bottom)
            make.left.bottom.equalToSuperview()
            make.right.equalTo(rightView.snp.left)
        }
//        liveChatView.backgroundColor = UIColor.random()
//        liveInfoView.backgroundColor = UIColor.random()
//        livePlayerView.backgroundColor = UIColor.random()
        demoView.snp.makeConstraints { (make) in
            make.bottom.right.equalTo(livePlayerView)
            make.width.height.equalTo(100)
        }
        let tap = UITapGestureRecognizer(target: self, action: #selector(tapInfoView))
        demoView.addGestureRecognizer(tap)
        demoView.backgroundColor = UIColor.random()
        self.chatTagView.isHidden = true
    }
    
    var isFull: Bool = false
    
    @objc func tapInfoView() {
        isFull = !isFull
        if isFull {
            livePlayerView.snp.remakeConstraints { (make) in
                make.left.bottom.top.right.equalTo(self.view)
            }
//            placeHolderView.snp.remakeConstraints { (make) in
//                make.left.bottom.top.right.equalTo(self.view)
//            }
            
            
            UIView.animate(withDuration: 0.3) {
                
                self.view.layoutIfNeeded()
                
            }
            
        }else {
            livePlayerView.snp.remakeConstraints { (make) in
                make.left.bottom.top.right.equalTo(placeHolderView)
            }
            
//            placeHolderView.snp.remakeConstraints { (make) in
//                make.left.top.equalToSuperview()
//                make.right.equalTo(liveChatView.snp.left)
//                make.height.equalTo(placeHolderView.snp.width).multipliedBy(850 / 1368.0)
//            }
            
            UIView.animate(withDuration: 0.3) {                
                self.view.layoutIfNeeded()
            }
        }
    }
    
    func showChatView() {
//        self.keyboardView.alpha = 1
//        self.keyboardView.becomeFirstResponder()
        self.keyboardView.textView.becomeFirstResponder()
    }
    
    func hidChatView() {
//        self.keyboardView.alpha = 1
        self.keyboardView.endEditing(true)
    }
    
}

extension BXGLiveRoomVC {
    func installObserver() {
        
        
        NotificationCenter.default.addObserver(self, selector: #selector(keyboardWillSHow(_:)), name: NSNotification.Name.UIKeyboardWillShow, object: nil)
        NotificationCenter.default.addObserver(self, selector: #selector(keyboardWillHide(_:)), name: NSNotification.Name.UIKeyboardWillHide, object: nil)
        
//        self.keyboardView.textView.addObserver(self, forKeyPath: <#T##String#>, options: <#T##NSKeyValueObservingOptions#>, context: <#T##UnsafeMutableRawPointer?#>)
    }
    
    func removeObserver() {
        NotificationCenter.default.removeObserver(self)
    }
    
    @objc func keyboardWillSHow(_ notification: Notification) {
        
        
        if let userInfo = notification.userInfo, let rect = userInfo["UIKeyboardBoundsUserInfoKey"] as? CGRect {
            offsetView.snp.updateConstraints { (make) in
                make.height.equalTo(rect.size.height)
            }
        }
//        self.keyboardView.alpha = 0
        UIView.animate(withDuration: 0.25) {
//            self.keyboardView.alpha = 1
            self.view.layoutIfNeeded()
        }
    }
    @objc func keyboardWillHide(_ notification: Notification) {
        
        offsetView.snp.updateConstraints { (make) in
            make.height.equalTo(0)
        }
        
        UIView.animate(withDuration: 0.25, animations: {
            self.view.layoutIfNeeded()
//            self.keyboardView.alpha = 0
        }) { (succeed) in
            
        }
    }
}

extension BXGLiveRoomVC: UITextFieldDelegate {
    func textFieldDidEndEditing(_ textField: UITextField) {
        keyboardView.isHidden = true
    }
    
    func textFieldDidBeginEditing(_ textField: UITextField) {
        keyboardView.isHidden = false
    }
}

extension BXGLiveRoomVC: BXGLiveManagerDelegate {
    
    func liveManager(_ liveManager: BXGLiveManager!, dialogArray: [BXGLiveDialogModel]!) {
        liveChatView.modelArray = dialogArray
    }
    
    func liveManager(_ liveManager: BXGLiveManager!, state: BXGLiveManagerState, msg: String!) {
        if state == .unknownError {
            BXGHUDTool.showHUD(string: "获取直播信息失败,请稍后重试!")
            DispatchQueue.main.asyncAfter(deadline: .now() + 1.25) {
                self.navigationController?.popViewController(animated: true)
            }
        }
    }
    
    func liveManager(_ liveManager: BXGLiveManager!, kickOut isKickOut: Bool) {
        BXGHUDTool.showHUD(string: "您已被踢出直播间!")
        DispatchQueue.main.asyncAfter(deadline: .now() + 1.25) {
            self.navigationController?.popViewController(animated: true)
        }
    }
}
